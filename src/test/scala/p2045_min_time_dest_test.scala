package com.peacefulotter.leetcode

import org.scalatest.flatspec.AnyFlatSpec

class p2045_min_time_dest_test extends AnyFlatSpec {
  private def test(n: Int,
                   edges: Array[Array[Int]],
                   time: Int,
                   change: Int,
                   expected: Int) =
    assert(
      p2045_min_time_dest.secondMinimum(n, edges, time, change) === expected)

  it should "5, [[1,2],[1,3],[1,4],[3,4],[4,5]], 3, 5 => 13" in {
    test(5,
         Array(Array(1, 2), Array(1, 3), Array(1, 4), Array(3, 4), Array(4, 5)),
         3,
         5,
         13)
  }

  it should "2, [[1,2]], 3, 2 => 11" in {
    test(2, Array(Array(1, 2)), 3, 2, 11)
  }

  it should "6, [[1,2],[2,3],[2,4],[2,5],[5,6],[4,1],[5,3]], 457, 953 => 2363" in {
    test(6,
         Array(Array(1, 2),
               Array(2, 3),
               Array(2, 4),
               Array(2, 5),
               Array(5, 6),
               Array(4, 1),
               Array(5, 3)),
         457,
         953,
         2363)
  }

  it should "19, [.. edges ..], 850, 411 => x" in {
    test(
      19,
      Array(
        Array(1, 2),
        Array(2, 3),
        Array(1, 4),
        Array(2, 5),
        Array(2, 6),
        Array(2, 7),
        Array(7, 8),
        Array(8, 9),
        Array(7, 10),
        Array(9, 11),
        Array(11, 12),
        Array(1, 13),
        Array(3, 14),
        Array(13, 15),
        Array(14, 16),
        Array(8, 17),
        Array(4, 18),
        Array(11, 19),
        Array(17, 11),
        Array(3, 19),
        Array(19, 7),
        Array(12, 5),
        Array(8, 1),
        Array(15, 7),
        Array(19, 6),
        Array(18, 9),
        Array(6, 8),
        Array(14, 19),
        Array(13, 18),
        Array(15, 2),
        Array(13, 12),
        Array(1, 5),
        Array(16, 18),
        Array(3, 16),
        Array(6, 1),
        Array(18, 14),
        Array(12, 1),
        Array(16, 6),
        Array(13, 11),
        Array(1, 14),
        Array(16, 13),
        Array(11, 16),
        Array(4, 15),
        Array(17, 5),
        Array(5, 9),
        Array(12, 2),
        Array(4, 10),
        Array(9, 16),
        Array(17, 9),
        Array(3, 5),
        Array(10, 2),
        Array(18, 1),
        Array(15, 18),
        Array(12, 17),
        Array(10, 6),
        Array(10, 18),
        Array(19, 12),
        Array(12, 15),
        Array(19, 13),
        Array(1, 19),
        Array(9, 14),
        Array(4, 3),
        Array(17, 13),
        Array(9, 3),
        Array(17, 10),
        Array(19, 10),
        Array(5, 4),
        Array(5, 7),
        Array(14, 17),
        Array(1, 10),
        Array(4, 11),
        Array(6, 4),
        Array(5, 10),
        Array(7, 14),
        Array(8, 14),
        Array(18, 17),
        Array(15, 10),
        Array(11, 8),
        Array(14, 11),
        Array(7, 3),
        Array(5, 18),
        Array(13, 8),
        Array(4, 12),
        Array(11, 3),
        Array(5, 15),
        Array(15, 9),
        Array(8, 10),
        Array(13, 3),
        Array(17, 1),
        Array(10, 11),
        Array(15, 11),
        Array(19, 2),
        Array(1, 3),
        Array(7, 4),
        Array(18, 11),
        Array(2, 14),
        Array(9, 1),
        Array(17, 15),
        Array(7, 13),
        Array(12, 16),
        Array(12, 8),
        Array(6, 12),
        Array(9, 6),
        Array(2, 17),
        Array(15, 6),
        Array(16, 2),
        Array(12, 7),
        Array(7, 9),
        Array(8, 4)
      ),
      850,
      411,
      -1
    )
  }
}
